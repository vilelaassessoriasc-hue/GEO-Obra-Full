from fastapi import APIRouter, Depends, Query, HTTPException
from sqlalchemy.orm import Session
from sqlalchemy import text
from decimal import Decimal

# Tenta usar get_db se existir; senão monta via SessionLocal
try:
    from app.db.session import get_db
except Exception:
    from ..db.session import SessionLocal
    from typing import Generator
    def get_db() -> "Generator[Session, None, None]":
        db = SessionLocal()
        try:
            yield db
        finally:
            db.close()

router = APIRouter(prefix="/jobs", tags=["jobs"])

@router.get("/{job_id}/tasks_nearby")
def tasks_nearby(job_id: int, radius_km: float = Query(30.0, ge=0.0), db: Session = Depends(get_db)):
    """
    Retorna tarefas próximas (fn_job_nearby_tasks). Converte Decimals para float para evitar 500.
    """
    sql = text("""
        SELECT task_id, title, status, distance_km
        FROM fn_job_nearby_tasks(:job_id, :radius_km)
        ORDER BY distance_km ASC;
    """)
    rows = db.execute(sql, {"job_id": job_id, "radius_km": radius_km}).mappings().all()

    def _jsonable(d):
        d = dict(d)
        for k, v in d.items():
            if isinstance(v, Decimal):
                d[k] = float(v)
        return d

    data = [_jsonable(r) for r in rows]
    return {"job_id": job_id, "radius_km": radius_km, "count": len(data), "results": data}
