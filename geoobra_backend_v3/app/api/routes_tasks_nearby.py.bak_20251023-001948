from fastapi import APIRouter, Depends, Query, HTTPException
from sqlalchemy.orm import Session
from sqlalchemy import text
try:
    from ..db.session import get_db
except Exception:
    # Fallback: constroi get_db a partir de SessionLocal
    from ..db.session import SessionLocal
    from typing import Generator
    from sqlalchemy.orm import Session
    def get_db() -> Generator[Session, None, None]:
        db = SessionLocal()
        try:
            yield db
        finally:
            db.close()

router = APIRouter(prefix="/jobs", tags=["jobs"])

@router.get("/{job_id}/tasks_nearby")
def tasks_nearby(job_id: int, radius_km: float = Query(30.0, ge=0.0), db: Session = Depends(get_db)):
    """
    Retorna tarefas (tasks) próximas da vaga (job) informada, usando a função SQL:
      fn_job_nearby_tasks(job_id, radius_km)
    """
    try:
        sql = text("""
            SELECT task_id, title, status, distance_km
            FROM fn_job_nearby_tasks(:job_id, :radius_km)
            ORDER BY distance_km ASC;
        """)
        rows = db.execute(sql, {"job_id": job_id, "radius_km": radius_km}).mappings().all()
        return {
            "job_id": job_id,
            "radius_km": radius_km,
            "count": len(rows),
            "results": [dict(r) for r in rows],
        }
    except Exception as e:
        # logar no futuro; por enquanto retornamos 500 com detalhe
        raise HTTPException(status_code=500, detail=f"Erro ao consultar tarefas próximas: {e}")

